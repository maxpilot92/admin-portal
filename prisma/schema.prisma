// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  role               String
  username           String
  email              String               @unique
  password           String?
  status             String               @default("pending")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  avatarUrl          String?
  blog               Blog[]
  PasswordResetToken PasswordResetToken[]
  UseCase            UseCase[]
}

model Category {
  id          String      @id @default(uuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryFor String // e.g. "blog", "portfolio"
  Blog        Blog[]
  Portfolio   Portfolio[]
  Service     Service[]
}

model Blog {
  id         String   @id @default(uuid())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  content    String
  published  Boolean  @default(false)
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @default("1")
  tags       String[]
  url        String?
  mediaId    String?
}

model Media {
  id        String   @id @default(uuid())
  title     String
  public_id String?  @unique
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id           String       @id @default(uuid())
  title        String
  description  String
  technologies String[] // e.g. ["React", "Tailwind", "Prisma"]
  liveDemoUrl  String? // optional live link
  githubUrl    String? // optional GitHub/repo link
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  screenshots  Screenshot[] // relation to multiple images
  Category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String       @default("1")
}

model Screenshot {
  id          String    @id @default(uuid())
  url         String // stored URL (or path)
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  createdAt   DateTime  @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  role        String
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(uuid())
  name        String
  role        String
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  cursor1     String?
  cursor2     String?
  Category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UseCase {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Setting {
  id          String   @id @default(uuid())
  siteName    String
  siteUrl     String
  siteLogo    String?
  siteFavicon String?
  mode        String   @default("light") // light or dark or system
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
